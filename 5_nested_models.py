from pydantic import BaseModel

# âœ… Nested model for storing address details
class Address(BaseModel):
    city: str    # City name (e.g., Gurgaon)
    state: str   # State name (e.g., Haryana)
    pin: str     # Postal code (e.g., 122001)

# âœ… Main model representing a patient
class Patient(BaseModel):
    name: str             # Full name of the patient
    gender: str           # Gender (e.g., Male, Female)
    age: int              # Age in years
    address: Address      # Nested Address model

# âœ… Benefits of this structure:
# -----------------------------
# ðŸ”¹ Better Organization:
#     Related info like address is grouped in its own model.
# ðŸ”¹ Reusability:
#     Address model can be reused across other models (e.g., Doctor, Hospital).
# ðŸ”¹ Readability:
#     Clearly separates concerns; improves code readability and API documentation.
# ðŸ”¹ Validation:
#     Pydantic auto-validates nested modelsâ€”no manual parsing needed.

# âœ… Sample address data
address_dict = {
    'city': 'Gurgaon',
    'state': 'Haryana',
    'pin': '122001'
}

# âœ… Create Address instance (will auto-validate fields)
address1 = Address(**address_dict)

# âœ… Sample patient data using nested address
patient_dict = {
    'name': 'Nitish',
    'gender': 'Male',
    'age': 35,
    'address': address1  # Nested model instance
}

# âœ… Create Patient instance (nested validation included)
patient1 = Patient(**patient_dict)

# âœ… Convert Patient model to dict, example: include specific fields
temp = patient1.model_dump(include={'name', 'age'})  # Only include name and age

# âœ… Output the result
print(temp)           # {'name': 'Nitish', 'age': 35}
print(type(temp))     # <class 'dict'>